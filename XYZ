using System; 
using System.IO; 

class Program 
{
    static void Main()
    {
        string filePath = "C:\\Users\\revno\\Doc\\XYZ.txt"; // Задаем путь к файлу для чтения
        try // Начинаем блок try для обработки возможных исключений
        {
            string content = File.ReadAllText(filePath); // Читаем весь текст из указанного файла
            int maxLength = FindLongestXSequence(content); // Находим длину самой длинной последовательности 'X'
            Console.WriteLine($"Длина самой длинной последовательности символов 'X': {maxLength}"); // Печатаем результат
        }
        catch (Exception ex) // Перехватываем любые исключения, которые могут возникнуть в блоке try
        {
            Console.WriteLine($"Произошла ошибка: {ex.Message}"); // Выводим сообщение об ошибке
        }
    }

    static int FindLongestXSequence(string str) // Определяем метод для поиска самой длинной последовательности 'X'
    {
        int maxCount = 0; // Переменная для хранения максимальной длины последовательности
        int currentCount = 0; // Переменная для хранения текущей длины последовательности

        foreach (char c in str) // Итерируемся по каждому символу в строке
        {
            if (c == 'X') // Проверяем, является ли текущий символ 'X'
            {
                currentCount++; // Увеличиваем счетчик текущей последовательности
            }
            else // Если текущий символ не 'X'
            {
                if (currentCount > maxCount) // Проверяем, больше ли текущая последовательность максимальной
                {
                    maxCount = currentCount; // Обновляем максимальное значение, если это так
                }
                currentCount = 0; // Сбрасываем текущий счетчик
            }
        }

        // Проверяем последнюю последовательность 'X', если она была в конце строки
        if (currentCount > maxCount) // Если текущая последовательность больше максимальной
        {
            maxCount = currentCount; // Обновляем максимальную длину
        }

        return maxCount; // Возвращаем максимальную длину последовательности 'X'
    }
}
